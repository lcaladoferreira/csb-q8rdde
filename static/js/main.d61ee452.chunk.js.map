{"version":3,"sources":["Canvas.js","MatrixBG.js","App.js","index.js"],"names":["Canvas","props","draw","fps","establishContext","establishCanvasWidth","width","height","rest","canvasRef","useRef","useState","context","setContext","resizeCanvas","canvas","getBoundingClientRect","window","devicePixelRatio","ratio","scale","useEffect","current","ctx","getContext","animationFrameId","fpsInterval","now","then","elapsed","render","requestAnimationFrame","Date","startRendering","cancelAnimationFrame","ref","style","backgroundColor","position","MatrixBG","setCtx","canvasWidth","setCanvasWidth","letters","split","fontSize","columns","drops","i","timeout","disturbanceRow","disturbanceCol","fillStyle","fillRect","length","text","Math","floor","random","fillText","dropIndex","h","max","j","min","onMouseMove","e","clearTimeout","bounds","target","x","y","col","row","ceil","convertMousePosToRowsAndCols","clientX","left","clientY","top","setTimeout","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d61ee452.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst Canvas = (props) => {\n  const {\n    draw,\n    fps = 20,\n    establishContext,\n    establishCanvasWidth,\n    width = \"100%\",\n    height = \"100%\",\n    ...rest\n  } = props;\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n\n  const resizeCanvas = (context) => {\n    const canvas = context.canvas;\n    const { width, height } = canvas.getBoundingClientRect();\n\n    if (canvas.width !== width || canvas.height !== height) {\n      const { devicePixelRatio: ratio = 1 } = window;\n      canvas.width = width * ratio;\n      canvas.height = height * ratio;\n      if (establishCanvasWidth) {\n        establishCanvasWidth(canvas.width);\n      }\n      context.scale(ratio, ratio);\n      return true;\n    }\n    return false;\n  };\n\n  useEffect(() => {\n    //i.e. value other than null or undefined\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      setContext(ctx);\n      resizeCanvas(ctx);\n      if (establishContext) {\n        establishContext(ctx);\n      }\n    } else {\n      // if canvasRef set to null, keep state variable consistent with this\n      setContext(null);\n    }\n  }, []);\n\n  useEffect(() => {\n    let frameCount = 0;\n    let animationFrameId, fpsInterval, now, then, elapsed;\n\n    if (context) {\n      const render = () => {\n        animationFrameId = window.requestAnimationFrame(render);\n        now = Date.now();\n        elapsed = now - then;\n        if (elapsed > fpsInterval) {\n          // Get ready for next frame by setting then=now, but also adjust for your\n          // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\n          then = now - (elapsed % fpsInterval);\n          frameCount++;\n          draw();\n        }\n      };\n      const startRendering = (fps) => {\n        fpsInterval = 1000 / fps;\n        then = Date.now();\n        render();\n      };\n      startRendering(fps);\n    }\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw, context, resizeCanvas]);\n  return (\n    <canvas\n      ref={canvasRef}\n      {...rest}\n      style={{ backgroundColor: \"black\", width, height, position: \"absolute\" }}\n    />\n  );\n};\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport Canvas from \"./Canvas\";\n\nconst MatrixBG = (props) => {\n  const [ctx, setCtx] = useState(null);\n  const [canvasWidth, setCanvasWidth] = useState(null);\n\n  const establishContext = (context) => {\n    setCtx(context);\n  };\n\n  const establishCanvasWidth = (width) => {\n    setCanvasWidth(width);\n  };\n\n  // Setting up the letters\n  // Move the array outside draw so it is not needlessly recalculated on each call to draw\n  const chars =\n    \"L34ndr0CaladoFullStackDeveloperWithFrontEndMBA/|ANGULAR?REACT?Vue\";\n  const letters = chars.split(\"\");\n\n  // Font-size remains constant, so similarly move outside draw\n  const fontSize = 12;\n  // Setting up the columns\n  const columns = canvasWidth ? canvasWidth / fontSize : 28;\n  // Setting up the drops\n  const drops = [];\n  for (let i = 0; i < columns; i++) {\n    drops[i] = 1;\n  }\n\n  const convertMousePosToRowsAndCols = (x, y) => {\n    // get col position\n    const col = Math.floor(x / fontSize);\n\n    // get row pos\n    const row = Math.min(\n      Math.ceil(y / fontSize),\n      Math.floor(ctx.canvas.height)\n    );\n\n    return { row, col };\n  };\n\n  // Disturbance Effect Handlers\n  let disturbanceRow = -1;\n  let disturbanceCol = -1;\n  let timeout;\n\n  const disturbanceEffect = (e) => {\n    clearTimeout(timeout);\n    const bounds = e.target.getBoundingClientRect();\n    const x = e.clientX - bounds.left;\n    const y = e.clientY - bounds.top;\n    const { row, col } = convertMousePosToRowsAndCols(x, y);\n    disturbanceRow = row;\n    disturbanceCol = col;\n    timeout = setTimeout(() => {\n      disturbanceRow = -1;\n      disturbanceCol = -1;\n    }, 50);\n  };\n\n  const isDisturbanceAffectedPosition = (dropIndex) => {\n    return (\n      drops[dropIndex] * fontSize > disturbanceRow &&\n      dropIndex === disturbanceCol\n    );\n  };\n\n  const draw = () => {\n    if (ctx) {\n      ctx.fillStyle = \"rgba(1, 0, 0, 0.05)\";\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      for (let i = 0; i < drops.length; i++) {\n        const text = letters[Math.floor(Math.random() * letters.length)];\n        ctx.fillStyle = \"#120a8f\";\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\n        drops[i]++;\n        if (drops[i] * fontSize > ctx.canvas.height && Math.random() > 0.95) {\n          drops[i] = 0;\n        }\n        if (isDisturbanceAffectedPosition(i)) {\n          const h = Math.max(i - 1, 0);\n          const j = Math.min(i + 1, Math.floor(columns));\n          drops[h] = disturbanceRow;\n          drops[i] = disturbanceRow;\n          drops[j] = disturbanceRow;\n        }\n      }\n    }\n  };\n\n  return (\n    <Canvas\n      draw={draw}\n      onMouseMove={disturbanceEffect}\n      establishContext={establishContext}\n      establishCanvasWidth={establishCanvasWidth}\n    />\n  );\n};\n\nexport default MatrixBG;\n","import MatrixBG from \"./MatrixBG\";\n\nfunction App() {\n  return (\n    <div style={{ position: \"relative\", width: \"100vw\", height: \"100vh\" }}>\n      <MatrixBG />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}